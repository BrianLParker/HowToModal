<div style="width:600px;height:600px;">
    <div class="h-100 d-flex flex-column">
        <div class="flex-fill d-flex flex-column">
            <div class="scene-body">
                <div class="scene">
                    <div class="floor"></div>
                    <div class="cube">
                        <div class="front"></div>
                        <div class="back"></div>
                        <div class="left"></div>
                        <div class="right"></div>
                        <div class="top">
                            <div class="ballShadow"></div>
                        </div>
                        <div class="bottom"></div>
                    </div>
                    <div class="ball"></div>
                </div>
            </div>
        </div>
        <div>
            <div class="d-flex flex-row p-3 bg-dark text-white-50">
                <input class="form-control col-2 mr-3" type="color" id="favcolor" name="favcolor" @bind-value="@ballColor" @bind-value:event="oninput" />
                <input class="form-control col-2" type="color" id="favcolor" name="favcolor" @bind-value="@boxColor" @bind-value:event="oninput" />
                <div class="m-2 col-8"><small>Based on work shared by <strong>Amit Sheen</strong>.</small></div>
            </div>
            <div class="bg-dark p-3 mb-2">
                <input type="range" class="form-control-range" id="formControlRange" @bind-value="@Angle" min="0" max="359" @bind-value:event="oninput" />
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public string BallColor { get; set; }
    [Parameter]
    public string BoxColor { get; set; }
    [Parameter]
    public int Angle { get; set; }

    protected override void OnParametersSet()
    {
        ballColor = BallColor;
        boxColor = BoxColor;
        base.OnParametersSet();
    }

    string ballColor = "#ff00ff";
    string boxColor = "#00ff00";
}
<style>

    :root {
        --boxColor: @($"{boxColor}19");
        --rotateSpeed: 10s;
        --bounceSpeed: 1.5s;
        --ballColor: @ballColor;
        --sceneColor: black;
        --viewHeight: 3em;
    }

    .scene-body {
        background-color: var(--sceneColor);
        min-height: 100%;
        max-height: 100%;
        height: 100%;
        width: 100%;
        overflow: hidden;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 70px;
        perspective: 10em;
        perspective-origin: 50% calc(50% - var(--viewHeight));
    }

    .scene {
        position: relative;
        transform-style: preserve-3d;
        transform: rotateY(@(Angle)deg);
    }
@*        animation: sceneRotate var(--rotateSpeed) infinite linear; *@
    @@keyframes sceneRotate {
        to {
            transform: rotateY(360deg);
        }
    }

    .ball {
        width: 1em;
        height: 1em;
        border-radius: 50%;
        background: var(--ballColor);
        position: absolute;
        left: -0.5em;
        bottom: 1em;
        background: radial-gradient( circle at top, var(--ballColor), 40%, #000 );
        transform: rotateY(@(-Angle)deg);
        animation: ballBounce var(--bounceSpeed) infinite ease-out ;
    }

    @@keyframes ballBounce {
        0%, 100% {
            bottom: 0.5em;
        }

        50% {
            bottom: 3em;
            animation-timing-function: ease-in;
        }
    }

    .ballShadow {
        position: absolute;
        width: 100%;
        height: 100%;
        background: radial-gradient(#0007,#0000 50%);
        animation: ballShadow var(--bounceSpeed) infinite ease-out;
    }

    @@keyframes ballShadow {
        0%, 8%, 93.5% {
            transform: scale(1);
            opacity: 1;
        }

        50% {
            transform: scale(2);
            opacity: 0.5;
            animation-timing-function: ease-out;
        }
    }

    .cube {
        width: 2em;
        height: 2em;
        transform-style: preserve-3d;
        position: absolute;
        bottom: -1em;
        left: -1em;
        animation: cubeHeight var(--bounceSpeed) infinite linear;
    }

    @@keyframes cubeHeight {
        0%, 100% {
            height: 1.5em;
        }

        8%, 93.5% {
            height: 2em;
        }
    }

    .front, .back, .left, .right {
        position: absolute;
        width: 100%;
        height: 100%;
        background: var(--boxColor);
        box-shadow: 0 0 0.5em #000a inset;
    }

    .front {
        transform: translateZ(1em);
    }

    .right {
        transform: rotateY(90deg) translateZ(1em);
    }

    .back {
        transform: rotateY(180deg) translateZ(1em);
    }

    .left {
        transform: rotateY(270deg) translateZ(1em);
    }

    .top {
        overflow: hidden;
        position: absolute;
        width: 2em;
        height: 2em;
        background: var(--boxColor);
        transform: translateY(-50%) rotateX(90deg);
        box-shadow: 0 0 0.5em #000a inset;
    }

    .bottom {
        position: absolute;
        width: 2em;
        height: 2em;
        background: #0000;
        transform: translateY(48%) rotateX(90deg);
        box-shadow: 0 0 0.5em #000a;
    }

    .floor {
        width: 15em;
        height: 15em;
        background: radial-gradient(#0000, #000 75%), repeating-conic-gradient(from 45deg,#111 0deg 90deg,#222 90deg 180deg);
        background-size: 100%, 1em 1em;
        top: 1em;
        position: absolute;
        transform: translate(-50%, -50%) rotateX(90deg);
    }

</style>
